name: Deploy to aws
on: 
  push:
    branches:
    - dev
    - prod
  pull_request:
    branches:
    - prod

jobs:
  automated_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      
      - name: Update Python and install requests
        run: |
          cd $GITHUB_WORKSPACE
          python -m pip install --upgrade pip
          pip install requests
        
      - name: Run Unit Tests
        run: | 
          python -m unittest test_unittest.py
          echo "unittest is finished"

      - name: Negative Check Parameter DEV_TWEETS_DATA exists
        env:
          MY_Secret: ${{ secrets.DEV_TWEETS_DATA }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret DEV_TWEETS_DATA is empty')

      - name: Negative Check Parameter AWS_ACCESS_KEY_ID exists
        env:
          MY_Secret: ${{ secrets.AWS_ACCESS_KEY_ID }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret AWS_ACCESS_KEY_ID is empty')

      - name: Negative Check Parameter AWS_SECRET_ACCESS_KEY exists
        env:
          MY_Secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret AWS_SECRET_ACCESS_KEY is empty')

      - name: Negative Check Parameter BEARERTOKEN exists
        env:
          MY_Secret: ${{ secrets.BEARERTOKEN }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret BEARERTOKEN is empty')

      - name: Negative Check Parameter DEV_TWEETS_SOURCE_META exists
        env:
          MY_Secret: ${{ secrets.DEV_TWEETS_SOURCE_META }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret DEV_TWEETS_SOURCE_META is empty')

      - name: Negative Check Parameter PROD_TWEETS_DATA exists
        env:
          MY_Secret: ${{ secrets.PROD_TWEETS_DATA }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret PROD_TWEETS_DATA is empty')

      - name: Negative Check Parameter PROD_TWEETS_META_SOURCE exists
        env:
          MY_Secret: ${{ secrets.PROD_TWEETS_META_SOURCE }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret PROD_TWEETS_META_SOURCE is empty')

      - name: Negative Check Parameter TWEET_STARTDATE_DEFAULT exists
        env:
          MY_Secret: ${{ secrets.TWEET_STARTDATE_DEFAULT }}
        if: "${{ env.MY_Secret == '' }}"
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Secret TWEET_STARTDATE_DEFAULT is empty')

      - name: Setup Cloud Formation Linter
        uses: scottbrenner/cfn-lint-action@v2
      
      - name: Run the CloudFormation Template Tester (Linter)
        run: |
          cfn-lint --version
          cfn-lint -t aws_infrastructure_provisioning/Lambda_GlueWorkflow_deploy.yml

  dev_configure_aws:
    if: ${{ github.ref == 'refs/heads/dev' }} 
    needs: automated_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Copy Data into dev environment
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          echo "Copy data to development environment on aws server on branch $GITHUB_REF"
          aws s3 sync ./glue_pyspark_job  s3://${{ secrets.DEV_TWEETS_SOURCE_META }}/pyspark_script/
          cd lambda_tweets_loader
          zip -r ../TweetLoaderZIP.zip .
          cd ../ 
          aws s3 cp TweetLoaderZIP.zip s3://${{ secrets.DEV_TWEETS_SOURCE_META }}/lambda-source/

      - name: Set parameters for dev environment
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          aws ssm put-parameter --name current_env --value "dev"  --type "String" --overwrite
          cat ./user_ids/user_ids.txt
          user_ids=`cat ./user_ids/user_ids.txt`
          aws ssm put-parameter --name UserIDs --value $user_ids  --type "String" --overwrite
          aws ssm put-parameter --name DEV_TWEETS_DATA --value ${{ secrets.DEV_TWEETS_DATA }}  --type "String" --overwrite
          aws ssm put-parameter --name DEV_TWEETS_SOURCE_META --value ${{ secrets.DEV_TWEETS_SOURCE_META }}  --type "String" --overwrite
          aws ssm put-parameter --name TWEET_STARTDATE_DEFAULT --value ${{ secrets.TWEET_STARTDATE_DEFAULT }}  --type "String" --overwrite
      

  prod_configure_aws:
    if: ${{ github.ref == 'refs/heads/prod' }}
    needs: automated_test
    environment: prod 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Copy Data into prod environment
        if: ${{ github.ref == 'refs/heads/prod' }}
        run: |
          echo "Copy data to development environment on aws server on branch $GITHUB_REF"
          aws s3 sync ./glue_pyspark_job  s3://${{ secrets.PROD_TWEETS_META_SOURCE }}/pyspark_script/
          cd lambda_tweets_loader
          zip -r ../TweetLoaderZIP.zip .
          cd ../ 
          aws s3 cp TweetLoaderZIP.zip s3://${{ secrets.PROD_TWEETS_META_SOURCE }}/lambda-source/

      - name: Set parameters for prod environment
        if: ${{ github.ref == 'refs/heads/prod' }}
        run: |
          aws ssm put-parameter --name current_env --value "dev"  --type "String" --overwrite
          cat ./user_ids/user_ids.txt
          user_ids=`cat ./user_ids/user_ids.txt`
          aws ssm put-parameter --name UserIDs --value $user_ids  --type "String" --overwrite
          aws ssm put-parameter --name PROD_TWEETS_DATA --value ${{ secrets.PROD_TWEETS_DATA }}  --type "String" --overwrite
          aws ssm put-parameter --name PROD_TWEETS_META_SOURCE --value ${{ secrets.PROD_TWEETS_META_SOURCE }}  --type "String" --overwrite
          aws ssm put-parameter --name TWEET_STARTDATE_DEFAULT --value ${{ secrets.TWEET_STARTDATE_DEFAULT }}  --type "String" --overwrite

      - name: Create Glue Database if not exists
        continue-on-error: true
        run: |
          aws sts get-caller-identity --query "Account"
          account_id=$?
          aws glue create-database --database-input '"{\"Name\":\"tempdb3\",\"Description\":\"This_is_a_description\"}"'  --catalog-id $account_id

  dev_deploy_cloudformation_template:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: dev_configure_aws
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: dev-tweet-analyzer-stack
          template: aws_infrastructure_provisioning/Lambda_GlueWorkflow_deploy.yml
          parameter-overrides: "Environmentval=dev,DataBucket=${{ secrets.DEV_TWEETS_DATA }},MetaBucket=${{ secrets.DEV_TWEETS_SOURCE_META }},PathIngestCrawler=s3://${{ secrets.DEV_TWEETS_DATA }}/dev/timeline/,GlueJobTempPath=s3://${{ secrets.DEV_TWEETS_SOURCE_META }}/GlueJobTemp/, PathProcessedTweets=s3://${{ secrets.DEV_TWEETS_DATA }}/dev/tweet_entities/,PathGlueJobScript=s3://${{ secrets.DEV_TWEETS_SOURCE_META }}/pyspark_script/get_entities_sentiment.py"

  prod_deploy_cloudformation_template:
    if: ${{ github.ref == 'refs/heads/prod' }}
    needs: prod_configure_aws
    environment: prod 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: prod-tweet-analyzer-stack
          template: aws_infrastructure_provisioning/Lambda_GlueWorkflow_deploy.yml
          parameter-overrides: "Environmentval=prod,DataBucket=${{ secrets.PROD_TWEETS_DATA }},MetaBucket=${{ secrets.PROD_TWEETS_META_SOURCE }},PathIngestCrawler=s3://${{ secrets.PROD_TWEETS_DATA }}/prod/timeline/,GlueJobTempPath=s3://${{ secrets.PROD_TWEETS_META_SOURCE }}/GlueJobTemp/, PathProcessedTweets=s3://${{ secrets.PROD_TWEETS_DATA }}/prod/tweet_entities/,PathGlueJobScript=s3://${{ secrets.PROD_TWEETS_META_SOURCE }}/pyspark_script/get_entities_sentiment.py"
